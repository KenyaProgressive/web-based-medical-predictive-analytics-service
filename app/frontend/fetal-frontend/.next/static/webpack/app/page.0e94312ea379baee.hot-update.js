"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/controller/StateHooks.js":
/*!*************************************************!*\
  !*** ./src/components/controller/StateHooks.js ***!
  \*************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAppState: () => (/* binding */ useAppState)\n/* harmony export */ });\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/@tanstack/react-query/build/modern/useQuery.js\");\nvar _s = $RefreshSig$();\n\nconst fetchAllData = async ()=>{\n    const response = await fetch('http://localhost:8080/getState');\n    if (!response.ok) {\n        console.log(\"from error \");\n        throw new Error('Ошибка сети');\n    }\n    // console.log(\"from fetchAllData \", response.json());\n    return response.json();\n};\nconst useAppState = function() {\n    let isEnabled = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n    _s();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useQuery)({\n        queryKey: [\n            'allState'\n        ],\n        queryFn: fetchAllData,\n        refetchInterval: 4000,\n        enabled: isEnabled\n    });\n};\n_s(useAppState, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function() {\n    return [\n        _tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useQuery\n    ];\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL2NvbnRyb2xsZXIvU3RhdGVIb29rcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUQ7QUFFakQsTUFBTUMsZUFBZTtJQUNqQixNQUFNQyxXQUFXLE1BQU1DLE1BQU07SUFDN0IsSUFBSSxDQUFDRCxTQUFTRSxFQUFFLEVBQUU7UUFDZEMsUUFBUUMsR0FBRyxDQUFDO1FBQ1osTUFBTSxJQUFJQyxNQUFNO0lBRXBCO0lBQ0Esc0RBQXNEO0lBQ3RELE9BQU9MLFNBQVNNLElBQUk7QUFDeEI7QUFFTyxNQUFNQyxjQUFjO1FBQUNDLDZFQUFZOztJQUNwQyxPQUFPViwrREFBUUEsQ0FBQztRQUNaVyxVQUFVO1lBQUM7U0FBVztRQUN0QkMsU0FBU1g7UUFDVFksaUJBQWlCO1FBQ2pCQyxTQUFTSjtJQUNiO0FBQ0osRUFBRTtHQVBXRDs7UUFDRlQsMkRBQVFBIiwic291cmNlcyI6WyIvaG9tZS9tcl9rZW55YS9EZXNrdG9wL3Byb2plY3RzL3dlYi1iYXNlZC1tZWRpY2FsLXByZWRpY3RpdmUtYW5hbHl0aWNzLXNlcnZpY2UvYXBwL2Zyb250ZW5kL2ZldGFsLWZyb250ZW5kL3NyYy9jb21wb25lbnRzL2NvbnRyb2xsZXIvU3RhdGVIb29rcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VRdWVyeSB9IGZyb20gJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc7XG5cbmNvbnN0IGZldGNoQWxsRGF0YSA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjgwODAvZ2V0U3RhdGUnKTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZnJvbSBlcnJvciBcIik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcign0J7RiNC40LHQutCwINGB0LXRgtC4Jyk7XG5cbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coXCJmcm9tIGZldGNoQWxsRGF0YSBcIiwgcmVzcG9uc2UuanNvbigpKTtcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUFwcFN0YXRlID0gKGlzRW5hYmxlZCA9IGZhbHNlKSA9PiB7XG4gICAgcmV0dXJuIHVzZVF1ZXJ5KHtcbiAgICAgICAgcXVlcnlLZXk6IFsnYWxsU3RhdGUnXSxcbiAgICAgICAgcXVlcnlGbjogZmV0Y2hBbGxEYXRhLFxuICAgICAgICByZWZldGNoSW50ZXJ2YWw6IDQwMDAsXG4gICAgICAgIGVuYWJsZWQ6IGlzRW5hYmxlZCxcbiAgICB9KTtcbn07Il0sIm5hbWVzIjpbInVzZVF1ZXJ5IiwiZmV0Y2hBbGxEYXRhIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwiY29uc29sZSIsImxvZyIsIkVycm9yIiwianNvbiIsInVzZUFwcFN0YXRlIiwiaXNFbmFibGVkIiwicXVlcnlLZXkiLCJxdWVyeUZuIiwicmVmZXRjaEludGVydmFsIiwiZW5hYmxlZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/controller/StateHooks.js\n"));

/***/ })

});